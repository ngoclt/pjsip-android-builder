#!/bin/bash -e

. config.conf

PATCH_DIR=$BASEDIR/patches

# Create Download directory if it does not exist
if [ ! -d "$DOWNLOAD_DIR" ]
then
  mkdir $DOWNLOAD_DIR
fi

# Create Build directory if it does not exist
if [ ! -d "$BUILD_DIR" ]
then
  mkdir $BUILD_DIR
fi

#Force use of GCC instead of ndk default CLANG
export NDK_TOOLCHAIN_VERSION=4.9
export PATH="$NDK_TOOLCHAIN_VERSION:$PATH"

if [ "$SETUP_PACKAGES" == "1" ]
then
    # Setup Java 8
    sudo apt-get update
    sudo apt-get purge -y openjdk*
    sudo apt-get install -y openjdk-8-jdk

    sudo apt-get install -y unzip git

    DEPS="vim git curl bzip2 gcc g++ binutils make autoconf openssl \
          libssl-dev ant libopus0 \
          libpcre3 libpcre3-dev build-essential nasm \
          libc6:i386 libstdc++6:i386 zlib1g:i386"
    sudo -- sh -c "dpkg --add-architecture i386; apt-get update && apt-get -y upgrade && apt-get install -y ${DEPS}"
fi

if [ "$DOWNLOAD_NDK" == "1" ]
then

    echo ""
    echo "Downloading Android NDK ${NDK_VERSION} ..."
    echo ""

    cd $DOWNLOAD_DIR
    curl -L -# -o ndk.zip "$NDK_DOWNLOAD_URL" 2>&1
    rm -rf "$NDK_DIR_NAME"
    echo ""
    echo "Android NDK downloaded!"
    echo ""
    echo "Extracting Android NDK ..."
    echo ""
    unzip ndk.zip -d ndk
    mv ndk/$NDK_DIR_NAME .
    rm -rf ndk
    rm -rf ndk.zip
fi

if [ "$DOWNLOAD_SDK" == "1" ]
then

    echo ""
    echo "Downloading Android SDK Tools version ${SDK_TOOLS_VERSION} ..."
    cd $DOWNLOAD_DIR
    curl -L -# -o sdk.zip "$SDK_DOWNLOAD_URL" 2>&1
    rm -rf "$SDK_DIR_NAME"
    mkdir $SDK_DIR_NAME
    echo ""
    echo "Android SDK downloaded!"
    echo ""
    echo "Extracting Android SDK ..."
    echo ""
    unzip sdk.zip -d $SDK_DIR_NAME
    rm -rf sdk.zip
fi

if [ "$DOWNLOAD_ANDROID_APIS" == "1" ]
then
    cd $DOWNLOAD_DIR/${SDK_DIR_NAME}/tools

    mkdir -p licenses

    echo "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e\n24333f8a63b6825ea9c5514f83c2829b004d1fee" > licenses/android-sdk-license
    echo "84831b9409646a918e30573bab4c9c91346d8abd\n504667f4c0de7af1a06de9f4b1727b84351f2910" > licenses/android-sdk-preview-license
    yes | ./bin/sdkmanager "build-tools;30.0.2"

    ALL_SDK=$(./android list sdk --all)

    for api in "${SETUP_ANDROID_APIS[@]}"
    do
        echo "\n\nDownloading Android API Platform ${api}..."
        PACKAGE="platforms;android-${api}"
        echo yes | ./bin/sdkmanager ${PACKAGE}
    done

fi

if [ "$DOWNLOAD_PJSIP" == "1" ]
then
    echo ""
    echo "Downloading PJSIP ${PJSIP_VERSION} ..."
    echo ""
    cd $DOWNLOAD_DIR
    pjsipFile="pjsip.tar.gz"
    curl -L -# -o $pjsipFile "$PJSIP_DOWNLOAD_URL" 2>&1
    rm -rf "$PJSIP_DIR_NAME"
    echo "PJSIP downloaded!"
    echo "Extracting PJSIP ..."
    tar xzf $pjsipFile && rm -rf $pjsipFile

    # G.729 Codec PATCH
    if [ "${ENABLE_G729}" == "1" ]
    then
        echo ""
        echo ""
        echo "######################################################################"
        echo "Apply patch to support G.729 codec without Intel IPP codec library ..."
        echo "######################################################################"
        echo ""
        cd $PATCH_DIR/support_g729
        ./install.sh
        cd $BASEDIR
    fi

    # Fixed Call-ID PATCH
    if [ "${USE_FIXED_CALLID}" == "1" ]
        then
        echo ""
        echo ""
        echo "######################################################################"
        echo "Apply patch to use a fixed Call-ID in registration ..."
        echo "######################################################################"
        echo ""
        cd $PATCH_DIR/fixed_callid
        ./patch.sh
        cd $BASEDIR
    fi

    # Changeset 5601 [fixed in pjsip 2.7] PATCH - only for pjsip 2.6
    if [ "${PJSIP_VERSION}" == "2.6" ]
    then
        echo ""
        echo ""
        echo "######################################################################"
        echo "Apply patch (changeset 5601) to PJSIP 2.6 to fix issue #2021"
        echo "######################################################################"
        echo ""
        cd $PATCH_DIR/changeset_5601
        ./patch.sh
        cd $BASEDIR
    fi
fi

if [ "$DOWNLOAD_SWIG" == "1" ]
then
    echo ""
    echo "Downloading SWIG ${SWIG_VERSION} ..."
    echo ""
    cd $DOWNLOAD_DIR
    curl -L -# -o swig.tar.gz "$SWIG_DOWNLOAD_URL" 2>&1
    rm -rf "$SWIG_DIR_NAME"
    echo "SWIG downloaded!"
    echo "Extracting SWIG ..."
    tar xzf swig.tar.gz && rm -rf swig.tar.gz
    cd "$SWIG_DIR_NAME"
    ./configure
    make && sudo make install
    cd ..
    rm -rf "$SWIG_DIR_NAME"
fi

if [ "$DOWNLOAD_OPENSSL" == "1" ]
then
    echo ""
    echo "Downloading OpenSSL ${OPENSSL_VERSION} ..."
    echo ""

    cd $DOWNLOAD_DIR
    curl -L -# -o openssl.tar.gz "$OPENSSL_DOWNLOAD_URL" 2>&1
    rm -rf "$OPENSSL_DIR_NAME"
    echo "OpenSSL downloaded!"
    echo "Extracting OpenSSL ..."
    tar xzf openssl.tar.gz && rm -rf openssl.tar.gz
    cd "${BASEDIR}"
    ./openssl-build-target-archs
fi

if [ "$DOWNLOAD_OPENH264" == "1" ]
then
    echo ""
    echo "Downloading OpenH264 ${OPENH264_VERSION} ..."
    echo ""
    cd $DOWNLOAD_DIR
    curl -L -# -o openh264.tar.gz "$OPENH264_DOWNLOAD_URL" 2>&1
    rm -rf "${OPENH264_DIR_NAME}"
    echo "OpenH264 downloaded!"
    echo "Extracting OpenH264 ..."
    tar xzf openh264.tar.gz && rm -rf openh264.tar.gz
    cd ${BASEDIR}
    ./openh264-build-target-archs || true
fi

if [ "$DOWNLOAD_LIBVPX" == "1" ]
then
    echo ""
    echo "Downloading Libvpx ${LIBVPX_VERSION} ..."
    echo ""
    cd $DOWNLOAD_DIR
    curl -L -# -o libvpx.tar.gz "$LIBVPX_DOWNLOAD_URL" 2>&1
    rm -rf "${LIBVPX_DIR_NAME}"
    echo "Libvpx downloaded!"
    echo "Extracting Libvpx ..."
    tar xzf libvpx.tar.gz && rm -rf libvpx.tar.gz
    cd ${BASEDIR}
    ./libvpx-build-target-archs || true
fi

if [ "$DOWNLOAD_OPUS" == "1" ]
then
    echo ""
    echo "Downloading Opus ${OPUS_VERSION} ..."
    echo ""
    cd "$DOWNLOAD_DIR"
    curl -L -# -o opus.tar.gz "$OPUS_DOWNLOAD_URL" 2>&1
    rm -rf "${OPUS_DIR_NAME}"
    echo "Opus downloaded!"
    echo "Extracting Opus ..."
    tar xzf opus.tar.gz && rm -rf opus.tar.gz
    cd ${BASEDIR}
    ./opus-build
fi

echo ""
echo "The build system is ready! Execute: ./build to build PJSIP"
